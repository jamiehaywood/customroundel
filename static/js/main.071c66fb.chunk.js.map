{"version":3,"sources":["Roundel.tsx","InputBox.tsx","ColorBox.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Roundel","props","text","toLocaleUpperCase","fontSize","Math","pow","length","roundelColour","viewBox","id","transform","preserveAspectRatio","d","fill","stroke","strokeWidth","stroke-opacity","fill-opacity","x","y","fontFamily","alignmentBaseline","textAnchor","InputBox","type","maxLength","className","placeholder","value","input","onChange","e","setInput","target","ColorBox","colour","setRoundelColour","divStyle","width","height","background","borderStyle","borderWidth","borderColor","borderRadius","padding","cursor","style","onClick","App","useState","colourBox","coloursArray","map","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wZAyCeA,G,KAjCkB,SAACC,GAC9B,IAAIC,EAAOD,EAAMC,KAAKC,oBAClBC,EAAW,SAAW,YAA2B,EAAIC,KAAKC,IAAKJ,EAAKK,OAAS,SAAW,UACxFC,EAAgBP,EAAMO,cAE1B,OACI,yBACIC,QAAQ,cACRC,GAAG,WACH,uBACIC,UAAU,6BACVC,oBAAoB,OACpBF,GAAG,UACH,0BACIG,EAAE,sSACFC,KAAK,OACLC,OAAQP,EACRQ,YAAY,cACZC,iBAAe,IACfP,GAAG,WAEP,0BACIG,EAAE,iFACFC,KAAK,UACLI,eAAa,IACbR,GAAG,UAGX,0BAAMS,EAAE,MAAMC,EAAE,QAAQN,KAAK,QAAQV,SAAUA,EAAUiB,WAAW,qBAAqBC,kBAAkB,UAAUC,WAAW,UAAUrB,MCrBvIsB,G,MAPmB,SAAAvB,GAC9B,OACI,2BAAOwB,KAAK,OAAOC,UAAW,GAAIC,UAAU,UAAUC,YAAY,gCAAgCC,MAAO5B,EAAM6B,MAAOC,SAAU,SAAAC,GAAC,OAAI/B,EAAMgC,SAASD,EAAEE,OAAOL,YCqBtJM,G,MAvBmB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,iBACrCC,EAAW,CACfC,MAAO,GACPC,OAAQ,GACRC,WAAYL,EACZM,YAAa,QACbC,YAAa,EACbC,YAAa,UACbC,aAAc,EACdC,QAAS,EACTC,OAAQ,WAGV,OACE,yBAAKpB,UAAU,OACb,4BACEqB,MAAOV,EACPW,QAAS,kBAAMZ,EAAiBD,S,OCMzBc,EAxBO,WAAO,IAAD,EACAC,mBAAS,IADT,mBACnBrB,EADmB,KACZG,EADY,OAGgBkB,mBAAS,WAHzB,mBAGnB3C,EAHmB,KAGJ6B,EAHI,KAKpBe,EAAYC,EAAaC,KAAI,SAACnC,GAAD,OACjC,kBAAC,EAAD,CAAUiB,OAAQjB,EAAGkB,iBAAkBA,OAGzC,OACE,6BACE,yBAAKV,UAAU,kBACb,kBAAC,EAAD,CAASzB,KAAM4B,EAAOtB,cAAeA,KAGvC,yBAAKmB,UAAU,kBACb,kBAAC,EAAD,CAAUG,MAAOA,EAAOG,SAAUA,KAGpC,yBAAKN,UAAU,oBAAoByB,KCdrBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.071c66fb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css'\n\ninterface Input {\n    text: string,\n    roundelColour: string\n}\n\nconst Roundel: React.FC<Input> = (props) => {\n    let text = props.text.toLocaleUpperCase();\n    let fontSize = 7.882566 + (81.4836881 - 7.882566) / (1 + Math.pow((text.length / 17.16642), 2.26065))\n    let roundelColour = props.roundelColour\n\n    return (\n        <svg\n            viewBox=\"0 0 500 400\"\n            id=\"svg2158\">\n            <g\n                transform=\"translate(-125,-332.36247)\"\n                preserveAspectRatio=\"none\"\n                id=\"layer1\">\n                <path\n                    d=\"M 537.93975,532.36219 C 537.95763,623.71357 464.09131,697.77801 372.96638,697.77801 C 281.84146,697.77801 207.97514,623.71357 207.99303,532.36219 C 207.97514,441.0108 281.84146,366.94636 372.96638,366.94636 C 464.09131,366.94636 537.95763,441.0108 537.93975,532.36219 L 537.93975,532.36219 z\"\n                    fill=\"none\"\n                    stroke={roundelColour}\n                    strokeWidth=\"69.16777039\"\n                    stroke-opacity=\"1\"\n                    id=\"circle\"\n                />\n                <path\n                    d=\"M 125,492.3786 L 625,492.3786 L 625,570.39822 L 125,570.39822 L 125,492.3786 z\"\n                    fill=\"#0019a8\"\n                    fill-opacity=\"1\"\n                    id=\"line\"\n                />\n            </g>\n            <text x=\"50%\" y=\"199px\" fill=\"white\" fontSize={fontSize} fontFamily=\"Johnston100-Medium\" alignmentBaseline='central' textAnchor=\"middle\">{text}</text>\n        </svg>\n    );\n}\n\nexport default Roundel;","import React from 'react';\nimport \"./InputBox.scss\";\n\ninterface Input {\n    setInput: Function,\n    input: string,\n}\n\nconst InputBox: React.FC<Input> = props => {\n    return (\n        <input type=\"text\" maxLength={25} className=\"textBox\" placeholder=\"Your custom roundel text here\" value={props.input} onChange={e => props.setInput(e.target.value)}>\n        </input>\n    );\n}\n\nexport default InputBox;","import React from \"react\";\nimport \"./ColorBox.scss\";\n\ninterface Props {\n  setRoundelColour: (colour: string) => void;\n  colour: string;\n}\n\nconst ColorBox: React.FC<Props> = ({ colour, setRoundelColour }) => {\n  const divStyle = {\n    width: 40,\n    height: 40,\n    background: colour,\n    borderStyle: \"solid\",\n    borderWidth: 1,\n    borderColor: \"#707070\",\n    borderRadius: 5,\n    padding: 5,\n    cursor: \"pointer\",\n  };\n\n  return (\n    <div className=\"box\">\n      <button\n        style={divStyle}\n        onClick={() => setRoundelColour(colour)}\n      ></button>\n    </div>\n  );\n};\n\nexport default ColorBox;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Roundel from \"./Roundel\";\nimport InputBox from \"./InputBox\";\nimport ColorBox from \"./ColorBox\";\nimport coloursArray from \"./colours-array.json\";\n\nconst App: React.FC = () => {\n  const [input, setInput] = useState(\"\");\n\n  const [roundelColour, setRoundelColour] = useState(\"#E76810\");\n\n  const colourBox = coloursArray.map((x) => (\n    <ColorBox colour={x} setRoundelColour={setRoundelColour} />\n  ));\n\n  return (\n    <div>\n      <div className=\"roundelStyling\">\n        <Roundel text={input} roundelColour={roundelColour} />\n      </div>\n\n      <div className=\"textBoxStyling\">\n        <InputBox input={input} setInput={setInput} />\n      </div>\n\n      <div className=\"colourBoxStyling\">{colourBox}</div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}